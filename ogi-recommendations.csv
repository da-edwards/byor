name,quadrant,ring,isNew,description,References
Implementing a thin slice,Delivery,Start doing,TRUE,<p>By focusing on thin vertical slices the customer can see small incremental improvements rather than a new shiny product  at the delivery date</p>,
Move towards full stack teams,Delivery,Do more,TRUE,<p>Provides the skills and ability needed to meet the definition of done for any incremental features of a product</p>,
Retrospectives (focused),Delivery,Do more,TRUE,<p>Retrospectives offer a insight into what went well and what could have been improved from the last sprint. They also offer a qualitative metric of the teams' happiness and capability</p>,
Cross Functional Requirements Measurements and Metrics,Technology,Do more,TRUE,"<p>Are you measuring your key requirements and if so, how relevant are those measurements?</p>",
Product Mode,Delivery,Start doing,TRUE,"<p>Switching to a product mode for Mobius allows for autonomous, loosley coupled teams that are able to 1. Ability to reorient quickly, 2. Reduced end-to-end cycle time, 3. Ability to truly iterate, 4. Respond rapidly to articulated and unarticulated user needs.</p>",https://www.martinfowler.com/articles/products-over-projects.html
Automated testing by devs,Technology,Do more,TRUE,"<p>Automated testing, most commonly found as unit tests, save time in numerous ways. By providing an objective definition of how a function should behave they reduce confusion and improve extensibility, while also giving confidence at commit time that a developer's work does what they think it does and preventing trivial errors from being returned to them to fix much later in the release cycle. 
It's obvious that testing all changes manually is time-consuming, repetitive and tedious. Repetitive is boring, boring leads to mistakes and makes you look for a different job by the end of the week.
Automating your repetitive tests can be a big game changer in your life as a software developer. Automate these tests and you no longer have to mindlessly follow click protocols in order to check if your software still works correctly. Automate your tests and you can change your codebase without batting an eye. If you've ever tried doing a large-scale refactoring without a proper test suite I bet you know what a terrifying experience this can be. How would you know if you accidentally broke stuff along the way? Well, you click through all your manual test cases, that's how. But let's be honest: do you really enjoy that? How about making even large-scale changes and knowing whether you broke stuff within seconds while taking a nice sip of coffee? Sounds more enjoyable if you ask me.
<a href=""https://martinfowler.com/articles/practical-test-pyramid.html"">The Practical Test Pyramid</a></p>",https://martinfowler.com/articles/practical-test-pyramid.html
Identify your key Cross Functional Requirements ,Technology,Do more,TRUE,"<p>Identify which Cross Functional Requirements apply to Mobius, along with their impact and priority. There are 3 ways in which these can be identified 
1. CFRs satisfied via user stories and acceptance criteria 
2. CFRs satisfied through architectural design
3. CFRs satisfied via the development process
<a href=""https://www.thekua.com/atwork/2017/05/three-ways-to-handle-cfrs/"">Three ways to handle CFRs</a></p>",https://www.thekua.com/atwork/2017/05/three-ways-to-handle-cfrs
Build Pipeline automation,Technology,Doing well,TRUE,"<p>One of the challenges of an automated build is you want your build to be fast, so that you can get fast feedback. A build pipeline is a way to deal with this by breaking up your build into stages. Each stage provides increasing confidence, usually at the cost of extra time. Early stages can find most problems yielding faster feedback, while later stages provide slower and more through probing.
<a href=""https://www.martinfowler.com/bliki/DeploymentPipeline.html"">Deployment Pipeline</a></p>",https://www.martinfowler.com/bliki/DeploymentPipeline.html
Decision to start Mobius APIs,Leadership,Doing well,TRUE,<p>Great decision to start the Mobius journey there is no better way than breaking up a monolith by splitting out functionality and features.</p>,
Proactive attempts to fix structures/procedures,Leadership,Doing well,TRUE,,
Automated functional tests coming soon,Technology,Doing well,TRUE,,
Reduce complexity in Mobius API code,Technology,Do more,TRUE,"<p>The cyclomatic complexity of Mobius code is lower than that of the Transactor APIs, indicating an improvement in this aspect of quality</p>",
NOC taking notice of monitoring,Technology,Doing well,TRUE,"<p>NOC has high visibility of the live status of products within OpenGI, allowing them to track trends and respond quickly to emergencies</p>",
Call out inefficiencies and waste,Delivery,Start doing,TRUE,<p>Quality can be improved by noticing and actioning ineffiencies. Continual improvement</p>,
Accounting for support/ maintenence,Delivery,Start doing,TRUE,"<p>Code can never be 100% perfect. With a build & run team, time and effort must be factored to handle workload spikes</p>",
Create a single backlog for Mobius,Delivery,Start doing,TRUE,<p>Multiple teams building a single product need to work from a single backlog. This alllows for better estimation for all items and a clear view of priorty</p>,
Estimation of all stories / PBIâ€™s / any piece of work,Delivery,Start doing,TRUE,"<p>Story estimation of all stories allows for greater understanding of planning, what lies ahead, progression and honest deleivery expectations</p>",
Follow up on retro actions,Delivery,Start doing,TRUE,"<p>As enlightening as retrospectives can be, their true value comes from action which lead to progression and quality improvement</p>",
Information radiators,Delivery,Start doing,TRUE,"<p>Reports and dashboards are helpful, but can be overlooked or forgotten. Having them physically present in the development area - on a whiteboard or dedicated screen - helps integrate them to people's minds and everyday work</p>",
Mob / feature code reviews,Technology,Start doing,TRUE,"<p>Allow information to be presented to a larger audience so that you can flag duplicating features, cross dependancies and conflicts at a higher level</p>",
Start using the public cloud,Technology,Start doing,TRUE,"<p>SaaS and the public cloud work well together by giving you agility around scaling, resilience and provisioning. Consider whether the points raised during your previous investigation are still valid.</p>",
Track flow metrics,Delivery,Start doing,TRUE,"<p>Understanding, through objective measures, the speed at which work can be completed will allow more effective sprint planning and overall project tracking</p>",
Empathise with your customers and their needs,Delivery,Start doing,TRUE,<p>The customer is the key to your product. Emphasising that your product should take the shape of what you need to succeed in your market helps you to understand what needs prioritisng and shows the customer that you value their opnion and needs.</p>,
Identify value,Delivery,Start doing,TRUE,"<p>Identifying items for a product is good, but understandinhg what these items give the customer and you in terms of value is great!</p>",
Create a product roadmap to realise the value,Delivery,Start doing,TRUE,"<p>Product roadmaps provide not just a high level view for the execs but an internal roadmap for development teams, sales and an external visualisation of the furture direction of the product. It will provide generalised view of new features and priotritised problem areas.</p>",
Empower product owners to drive the roadmap within their teams,Delivery,Start doing,TRUE,<p> product owners should be empowered to make decisions that will help unblock teams and reduce wasted effort </p>,
Create a shared understanding of the roadmap and iterate through,Delivery,Start doing,TRUE,<p>Create and maintain a product roadmap that is updated and shared </p>,
Collaborate to create a backlog to deliver the intended value,Delivery,Start doing,TRUE,<p>Create a backlog and a shared understanding of the scope</p>,
Capture details and assumptions at each level,Delivery,Start doing,TRUE,<p>Do a relative sizing of your stories. Size them based on complexity. </p>,
Delivery teams relatively size stories based on complexity,Delivery,Do more,TRUE,"<p>Chose a scale you are comfortable with (t-shirt, Fibonacci) If you are dealing with larger scale items always consider how </p>",
Track your velocity ,Delivery,Start doing,TRUE,<p>Measure your velocity. Use it as an indicator to help the teams move faster</p>,
Forecast and manage trade offs,Delivery,Start doing,TRUE,<p>Use the estimated scope and velocity to forecast and course correct where needed</p>,
Teams own their RAID logs,Delivery,Start doing,TRUE,<p>Team level RAIDs captured and shared. Teams to reflect on the RAIDs</p>,
Teams own work to completion,Delivery,Start doing,TRUE,<p>Teams assume complete responsibility of their work</p>,
Hold town halls to drive total transparency regarding MAP,Delivery,Start doing,TRUE,<p>Create a culture of open communication and transparency that runs through all layers.</p>,
QAs sit with teams,Delivery,Start doing,TRUE,<p>Give ownership of the feature to the team. Having a QA embedded within a team can help drive a culture of quality. </p>,
Cross-functional requirements & technical debt Champions,Leadership,Start doing,TRUE,<p>It not always easy for a team to keep sight of cross functional requirements and technical debt so why not have a champion who can challenge stories and ways of thinking </p>,
Goals in terms of direction not time,Leadership,Start doing,TRUE,<p>Not all goals can be achieved quickly. It is important to remember that that going slow is not a bad thing if you are heading in the right direction.</p>,
Town halls for leadership thought dissemination,Leadership,Start doing,TRUE,"<p>Allows you to open communication between all layers. ""The strategy must be crystal clear to everyone within the organisation"".</p>",
Accounting for technical debt,Technology,Start doing,TRUE,"<p>Technical debt can cause a host of problems which can grow the longer they aren't addressed. Keeping track of what debt has been introduced allows remediation to be planned and carried out alongside other sprint tasks, preventing it from getting out of hand</p>",
Add existing (Selenium) functional (automated) tests into pipelines,Technology,Start doing,TRUE,"<p>An incomplete suite of functional tests, using Selenium and Cucumber, already exists. Adding it to the deployment pipeline(s), even in the current state where tests are not complete, will have immediate benefits in terms of QAs' manual workload</p>",
Automated Provisioning of envs,Technology,Start doing,TRUE,"<p>Benefits of environment provisioning. Reduce Average Time to Provision, offers a direct measurement of the end-to-end process for provisioning new infrastructure. Reduce Service ComplexityGet Service Allocation Insights, centralizing all environment automation operations in one place, permitting a quick turnover of scalability investments, impact analysis and change execution when rearranging infrastructure resources.</p>",
Build & Run,Technology,Start doing,TRUE,"<p>You build it, you run it. If a team has ownership of the code until it ships, that team will be more capable and immersed to solve any problems which may arise before it reaches Production.</p>",
CFR & tech debt champions,Delivery,Start doing,TRUE,<p>It not always easy for a team to keep sight of cross functional requirements and technical debt so why not have a champion who can challenge stories and ways of thinking</p>,
Cross-functional requirements baked in,Technology,Start doing,TRUE,<p>Cross functional requirements must be considered throughout the life cycle of feature / story. It is a lot harder to retroactivley fix requirements. Functionally complete and complete should be the same thing.</p>,
Accelerate strangulation of Transactor,Technology,Start doing,TRUE,"<p>Strangulation offers an goal of more stable re-architectured code base at the end. During though there is a high level of risk and complexity due to functionality ownership, proxying and functional duplication.</p>",
Architects sit within team/s,Technology,Start doing,TRUE,<p>Example already exists with team Violet. Architects are a fountain of knowledge and experience. Sitting within the teams allows a unencumbered exchange of ideas and solution without having to cross boundaries.</p>,
Think in terms of vertical slicing ,Technology,Start doing,TRUE,<p>When strangling a legacy monolith deploy into micro services to reduce coupling to the monolith it is best to think in vertical slices allowing for ownership of data and functionality</p>,
Active review of the strangulation process,Technology,Start doing,TRUE,"<p>Review strangulation over time to assess the risks, progress and blockers. Are you in the same position you were in last quarter?</p>",
Monolith deploys,Technology,Stop doing,TRUE,"<p>One of the key benefits of a microservice architecture is that the services have independent development and release cycles: each could be deployed as soon as a release is made, and rolled back independently if needed. This allows for simplicity and speed of deployment and testing, but is prevented by current practices of deploying all microservices together alongside the Transactor API.</p>",
"Waiting for completeness before ""rolling out""",Delivery,Stop doing,TRUE,"<p>Tests, reports and even features can have merit as soon as they produce some usable behaviour: waiting for them to have all desired functionality can in many cases simply postpones the moment when users - developers or customers - can start to feel their value</p>",
Slow frequency of releases,Technology,Stop doing,TRUE,"<p>In a microservice model, release cycles should be short and frequent. By slowing the release cadence you add to the risk: cumulative features, slower feedback cycle. Users are also not seeing imcremental value as quickly as they could be.</p>",
Duplicating code,Technology,Stop doing,TRUE,"<p>If a change is needed on code which is duplicated, a developer should ideally change all copies at once. This takes more time and is confusing and inconvenient for the developer (which introduces human error). Worse, it's easy not to realise code is duplicated, meaning different parts of the codebase intended to perform the same functionality can diverge over time and cause problems which are confusing and thus time-consuming to fix</p>",
Ignoring unit test coverage,Technology,Stop doing,TRUE,"<p>See ""Automated testing by devs"". Mobius APIs actually have lower coverage than Transactor, indicating a decline in quality in the pursuit of pure feature completion.</p>",
Violating horizontal slicing,Technology,Stop doing,TRUE,"<p>A Controller / Service / Repository layering brings benefits in terms of abstraction which provides ease of use, flexibility and extensibility. However, this must be undertaken with disciplined rigor.</p>",
Define a prioritisation criteria,Delivery,Start doing,TRUE,<p>A shared prioritisation criteria that is aligned to objectives </p>,
Follow regular prioritisation cadence,Delivery,Start doing,TRUE,<p>A regular priortisation exercise to relatively prioritise the backlog items </p>,
Report data directly from source,Delivery,Start doing,TRUE,<p>Avoid creating layers of reporting that is not based on data directly from source</p>,
Daily standups,Delivery,Doing well,TRUE,Collaborate on highlighting any blockers or help teams need,
Desk checks,Delivery,Doing well,TRUE,,
TODO,Exec culture,Do more,TRUE,<p></p>,
Small & frequent commits,Technology,Start doing,TRUE,<p></p>,
